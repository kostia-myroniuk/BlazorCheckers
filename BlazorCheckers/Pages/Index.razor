@page "/"
@using BlazorCheckers.Components
@using BlazorCheckers.Data
@using BlazorCheckers.GameEngine
@using BlazorCheckers.Data.Items
@using Microsoft.AspNetCore.SignalR.Client;
@using Newtonsoft.Json
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager

<PageTitle>Checkers</PageTitle>

<NavBar Section=@GetSectionName() PlayerNickname=@nickname></NavBar>

<div class="container">
    @if (state == State.SignIn)
    {
        <SignInForm HubConnection="hubConnection"></SignInForm>
    }

    @if (state == State.Lobbies)
    {
        <button class="btn btn-primary" type="button" @onclick="()=>StartCreatingLobby()">
            Create new lobby
        </button>
        <hr>
        <LobbyListGroup HubConnection="hubConnection" Lobbies="lobbies"></LobbyListGroup>
    }

    @if (state == State.NewLobby)
    {
        <CreateLobbyForm HubConnection="hubConnection" LobbyNameInput="@GetDefaultLobbyName()" 
            OnCancelCallback="LeaveCreatingLobby" OnCreateCallback="LeaveCreatingLobby">
        </CreateLobbyForm>
    }

    @if (state == State.Lobby)
    {
        <LobbyWaitingScreen HubConnection="hubConnection" Lobby="currentLobby"></LobbyWaitingScreen>
    }

    @if (state == State.Game || state == State.Results && currentGame != null && currentLobby != null)
    {
        <GameHeader 
            PlayerSide="playerSide" 
            PlayerNickname="@currentLobby.GetNickname(playerSide)" 
            PlayerScore="@currentLobby.GetScore(playerSide)" 
            OpponentSide="opponentSide"
            OpponentNickname="@currentLobby.GetNickname(opponentSide)" 
            OpponentScore="@currentLobby.GetScore(opponentSide)"
            MoveSide="currentGame.CurrentSide" GameMode="@(currentLobby.GameMode)" 
            GameState="@currentGame.CurrentState">
        </GameHeader>

        <LostPieces Renderer="renderer" Side="opponentSide" Pieces="currentGame.LostPieces" 
            Nickname="@currentLobby.GetNickname(opponentSide)">
        </LostPieces>

        <div class="checkers-board-container">
            <div class="checkers-board">
                @foreach (var cell in currentGame.Board.GetCellsRotated(playerSide))
                {
                    <button @onclick="()=>OnButtonClick(cell)" 
                        class=@renderer.GetCellHtmlClass(cell, selectedCell, highlightedCells, movableCells)>
                        
                        @if (cell.Piece != null)
                        {
                            <div class="@renderer.GetPieceHtmlClass(cell.Piece)"></div>
                        }
                    </button>
                }
            </div>
        </div>

        <LostPieces Renderer="renderer" Side="playerSide" Pieces="currentGame.LostPieces" 
            Nickname="@currentLobby.GetNickname(playerSide)">
        </LostPieces>

        <GameUI HubConnection="hubConnection" OnLeaveCallback="LeaveGame" 
            PlayerSide="playerSide" MoveSide="currentGame.CurrentSide"
            GameEnded="@(state == State.Results)">
        </GameUI>
    }
</div>

@code 
{
    public enum State
    {
        SignIn,
        Lobbies,
        NewLobby,
        Lobby,
        Game,
        Results
    }

    private HubConnection? hubConnection;

    public State state;
    private Renderer renderer = new Renderer();

    private string nickname = "";
    private List<Lobby> lobbies = new List<Lobby>();
    private Lobby currentLobby;

    private Side playerSide;
    private Side opponentSide;
    private Game currentGame;

    private Cell? selectedCell = null;
    private List<Cell> highlightedCells = new List<Cell>();
    private List<Cell> movableCells = new List<Cell>();

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<string, string>("SignedIn", (nickname, serializedLobbies) =>
        {
            var lobbies = JsonConvert.DeserializeObject<List<Lobby>>(serializedLobbies);
            if (lobbies is null)
            {
                return;
            }

            this.nickname = nickname;
            this.lobbies = lobbies;
            state = State.Lobbies;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("LobbyAdded", (serializedLobby) =>
        {
            var lobby = JsonConvert.DeserializeObject<Lobby>(serializedLobby);
            if (lobby is null)
            {
                return;
            }

            lobbies.Add(lobby);
            if (state == State.Lobbies)
            {
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string>("LobbyRemoved", (serializedLobby) =>
        {
            var lobby = JsonConvert.DeserializeObject<Lobby>(serializedLobby);
            if (lobby is null)
            {
                return;
            }

            lobbies.RemoveAll(l => l.Id == lobby.Id);

            if (state == State.Lobbies)
            {
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string>("JoinedLobby", (serializedLobby) =>
        {
            var lobby = JsonConvert.DeserializeObject<Lobby>(serializedLobby);
            if (lobby is null)
            {
                return;
            }

            state = State.Lobby;
            currentLobby = lobby;

            int lobbyIndex = lobbies.FindIndex(l => l.Id == lobby.Id);
            if (lobbyIndex != -1)
            {
                lobbies[lobbyIndex] = lobby;
            }

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("LobbyUpdated", (serializedLobby) =>
        {
            var lobby = JsonConvert.DeserializeObject<Lobby>(serializedLobby);
            if (lobby is null)
            {
                return;
            }
            int lobbyIndex = lobbies.FindIndex(l => l.Id == lobby.Id);
            if (lobbyIndex == -1)
            {
                return;
            }

            lobbies[lobbyIndex] = lobby;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("LeftLobby", (serializedLobby) =>
        {
            var lobby = JsonConvert.DeserializeObject<Lobby>(serializedLobby);
            if (lobby is null)
            {
                return;
            }

            state = State.Lobbies;

            int lobbyIndex = lobbies.FindIndex(l => l.Id == lobby.Id);
            if (lobbyIndex != -1)
            {
                lobbies[lobbyIndex] = lobby;
            }

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, Side>("GameStarted", 
            (serializedGame, serializedLobby, playerSide) =>
        {
            var game = JsonConvert.DeserializeObject<Game>(serializedGame);
            var lobby = JsonConvert.DeserializeObject<Lobby>(serializedLobby);
            if (game is null || lobby is null)
            {
                return;
            }

            state = State.Game;
            currentGame = game;
            currentLobby = lobby;
            this.playerSide = playerSide;
            opponentSide = Game.GetOppositeSide(playerSide);

            selectedCell = null;
            highlightedCells = new List<Cell>();
            movableCells = GetMovableCells();

            InvokeAsync(StateHasChanged);
        }); 

        hubConnection.On<string>("GameUpdated", (serializedGame) =>
        {
            Game? game = JsonConvert.DeserializeObject<Game>(serializedGame);
            if (game is null || state != State.Game)
            {
                return;
            }

            currentGame = game;

            if (game.CurrentMoves.Count > 0 && playerSide == game.CurrentSide)
            {
                Move lastMove = game.CurrentMoves.Last();
                Cell lastCell = game.Board.GetCell(lastMove.EndRow, lastMove.EndColumn); 
                selectedCell = lastCell;
                highlightedCells = GetHighlightedCellsForSequence();
                movableCells.Clear();
            }
            else
            {
                selectedCell = null;
                highlightedCells.Clear();
                movableCells = GetMovableCells();
            }

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("GameEnded", (serializedGame, serializedLobby) =>
        {
            var game = JsonConvert.DeserializeObject<Game>(serializedGame);
            var lobby = JsonConvert.DeserializeObject<Lobby>(serializedLobby);
            if (game is null || lobby is null)
            {
                return;
            }

            state = State.Results;
            currentGame = game;
            currentLobby = lobby;

            selectedCell = null;
            highlightedCells.Clear();
            movableCells.Clear();

            InvokeAsync(StateHasChanged);
        }); 

        await hubConnection.StartAsync();
    }

    private async Task ApplyMove(Move move, bool isCapture)
    {
        string moveSerialized = JsonConvert.SerializeObject(move);
        await (hubConnection?.SendAsync("ApplyMove", moveSerialized, isCapture) ?? Task.CompletedTask);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void StartCreatingLobby()
    {
        state = State.NewLobby;
        InvokeAsync(StateHasChanged);
    }

    private void LeaveCreatingLobby()
    {

        state = State.Lobbies;
        InvokeAsync(StateHasChanged);
    }

    private void LeaveGame()
    {
        state = State.Lobbies;
        InvokeAsync(StateHasChanged);
    }

    private async Task OnButtonClick(Cell clickedCell)
    {
        if (currentGame.CurrentSide != playerSide || state != State.Game)
        {
            return;
        }

        bool isCapturingMove = currentGame.Sequences.Count > 0; 

        if (highlightedCells.Contains(clickedCell) && selectedCell is not null)
        {
            Move move = new Move(selectedCell, clickedCell);
            await ApplyMove(move, isCapturingMove);
        }

        if (currentGame.CurrentMoves.Count == 0)
        {
            if (clickedCell == selectedCell)
            {
                selectedCell = null;
                highlightedCells.Clear();
                movableCells = GetMovableCells();
            }
            else if (clickedCell != selectedCell && movableCells.Contains(clickedCell))
            {
                selectedCell = clickedCell;
                highlightedCells = GetHighlightedCells(clickedCell, isCapturingMove);
            }
        }
    }

    private List<Cell> GetMovableCells()
    {
        if (playerSide != currentGame.CurrentSide || currentGame.CurrentMoves.Count > 0)
        {
            return new List<Cell>();
        }

        bool isCapturingMove = currentGame.Sequences.Count > 0;
        IEnumerable<Move> suitableMoves = GetSuitableMoves(isCapturingMove);

        var movableCells = new List<Cell>();
        foreach (Move move in suitableMoves)
        {
            Cell startCell = currentGame.Board.GetCell(move.StartRow, move.StartColumn);
            if (!movableCells.Contains(startCell))
            {
                movableCells.Add(startCell);
            }
        }
        return movableCells;
    }

    private List<Cell> GetHighlightedCells(Cell fromCell, bool isCapturingMove)
    {
        IEnumerable<Move> suitableMoves = GetSuitableMoves(isCapturingMove);

        var highlightedCells = new List<Cell>();
        foreach (Move move in suitableMoves)
        {
            Cell startCell = currentGame.Board.GetCell(move.StartRow, move.StartColumn);
            Cell endCell = currentGame.Board.GetCell(move.EndRow, move.EndColumn);
            if (fromCell == startCell && !highlightedCells.Contains(endCell))
            {
                highlightedCells.Add(endCell);
            }
        }
        return highlightedCells;
    }

    private IEnumerable<Move> GetSuitableMoves(bool captures)
    {
        if (captures)
        {
            return currentGame.Sequences
                .Where(s => s.Moves.Count > 0).Select(s => s.Moves.First());
        }
        return currentGame.RegularMoves;
    }

    private List<Cell> GetHighlightedCellsForSequence()
    {
        var highlightedCells = new List<Cell>();

        IEnumerable<Move> suitableMoves = currentGame.Sequences
            .Where(s => s.StartsWith(currentGame.CurrentMoves) && 
                s.Moves.Count > currentGame.CurrentMoves.Count)
            .Select(s => s.Moves[currentGame.CurrentMoves.Count]);

        foreach (Move move in suitableMoves)
        {
            Cell endCell = currentGame.Board.GetCell(move.EndRow, move.EndColumn);
            if (!highlightedCells.Contains(endCell))
            {
                highlightedCells.Add(endCell);
            }
        }

        return highlightedCells;
    }

    private string GetSectionName()
    {
        return Regex.Replace(state.ToString(), "([A-Z])", " $1").Trim();
    }

    private string GetDefaultLobbyName()
    {
        return string.IsNullOrEmpty(nickname) ? "Lobby" : $"{nickname}\'s lobby";
    }
}