@page "/"
@using BlazorCheckers.Components
@using BlazorCheckers.Multiplayer
@using BlazorCheckers.GameEngine
@using Microsoft.AspNetCore.SignalR.Client;
@using Newtonsoft.Json
@inject NavigationManager NavigationManager

<PageTitle>Checkers</PageTitle>

@if (currentState == State.EnteringNickname)
{
    <NicknameDiv HubConnection="hubConnection"></NicknameDiv>
}

@if (currentState == State.InLobbyList)
{
    <h1>Lobby list</h1>
    <h3>Player: @(nickname)</h3>
    <NewLobbyDiv HubConnection="hubConnection"></NewLobbyDiv>
    <hr>
    <div>
        @foreach (var item in availableLobbies.Select((lobby, index) => new { lobby, index }))
        {
            <div>
                <LobbyDiv Lobby="item.lobby"></LobbyDiv>
                <button @onclick="()=>JoinLobby(item.index)" class="btn btn-primary">Join</button>
                <hr>
            </div>
        }
    </div>
}

@if (currentState == State.InLobby)
{
    <h1>Lobby</h1>
    <LobbyDiv Lobby="currentLobby"></LobbyDiv>
    <button @onclick="()=>LeaveLobby()" class="btn btn-danger">Leave</button>
}

@if (currentState == State.InGame && board != null)
{
    <h1>Game</h1>
    <h3>Current player: @(currentSide)</h3>
    <div class="game-board">
        @foreach (var row in board.Cells)
        {
            @foreach (var cell in row)
            {
                <button @onclick="()=>OnButtonClick(cell)" class=@GetCellHtmlClass(cell)>
                    @GetCellPieceSymbol(cell)
                </button>
            }
        }
    </div>
}

@code 
{
    public enum State
    {
        EnteringNickname,
        InLobbyList,
        InLobby,
        InGame
    }

    private HubConnection? hubConnection;

    public State currentState;
    private string nickname = "";
    private List<Lobby> availableLobbies = new List<Lobby>();
    private Lobby? currentLobby;

    private Side currentSide;
    private Board? board = new Board();
    private Cell? selectedCell;
    //private List<List<Cell>> validMoves = new List<List<Cell>>();
    private List<Cell> highlightedCells = new List<Cell>();
    //private List<Cell> enteredMove = new List<Cell>();
    private List<RegularMove> regularMoves = new List<RegularMove>();
    private List<List<CaptureMove>> captureMoves = new List<List<CaptureMove>>();
    private List<RegularMove> currentMove = new List<RegularMove>();

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<string>("EnteredNickname", (nickname) =>
        {
            this.nickname = nickname;
            currentState = State.InLobbyList;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Lobby>("LobbyAdded", (lobby) =>
        {
            availableLobbies.Add(lobby);
            if (currentState == State.InLobbyList)
            {
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string>("GetAllLobies", (lobbies) =>
        {
            availableLobbies = JsonConvert.DeserializeObject<List<Lobby>>(lobbies);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("JoinedLobby", (lobby) =>
        {
            if (currentState == State.InLobbyList)
            {
                currentState = State.InLobby;
                currentLobby = JsonConvert.DeserializeObject<Lobby>(lobby);
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<int, string>("LobbyUpdated", (lobbyId, lobby) =>
        {
            if (currentState == State.InLobbyList && 
                lobbyId >= 0 && lobbyId < availableLobbies.Count)
            {
                availableLobbies[lobbyId] = JsonConvert.DeserializeObject<Lobby>(lobby);
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On("LeftLobby", () =>
        {
            if (currentState == State.InLobby)
            {
                currentState = State.InLobbyList;
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string, Side, List<List<CaptureMove>>, List<RegularMove>>("GameStarted", 
            (board, currentSide, captureMoves, regularMoves) =>
        {
            if (currentState == State.InLobbyList ||
                currentState == State.InLobby)
            {
                currentState = State.InGame;
                this.board = JsonConvert.DeserializeObject<Board>(board, 
                    new JsonSerializerSettings { ObjectCreationHandling = ObjectCreationHandling.Replace });
                this.currentSide = currentSide;
                this.captureMoves = captureMoves;
                this.regularMoves = regularMoves;

                selectedCell = null;
                highlightedCells = new List<Cell>();
                currentMove = new List<RegularMove>();

                InvokeAsync(StateHasChanged);
            }
        }); 

        hubConnection.On<string, Side, List<List<CaptureMove>>, List<RegularMove>>("GameUpdated", 
            (board, currentSide, captureMoves, regularMoves) =>
        {
            if (currentState == State.InGame)
            {
                this.board = JsonConvert.DeserializeObject<Board>(board, 
                    new JsonSerializerSettings { ObjectCreationHandling = ObjectCreationHandling.Replace });
                this.currentSide = currentSide;
                this.captureMoves = captureMoves;
                this.regularMoves = regularMoves;

                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinLobby(int lobbyId)
    {
        await (hubConnection?.SendAsync("JoinLobby", lobbyId) ?? Task.CompletedTask);
    }

    private async Task LeaveLobby()
    {
        await (hubConnection?.SendAsync("LeaveLobby") ?? Task.CompletedTask);
    }

    private async Task MakeRegularMove(RegularMove move)
    {
        await (hubConnection?.SendAsync("MakeRegularMove", move) ?? Task.CompletedTask);
    }

    private async Task MakeCaptureMove(RegularMove move)
    {
        await (hubConnection?.SendAsync("MakeCaptureMove", move) ?? Task.CompletedTask);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task OnButtonClick(Cell clickedCell)
    {
        if (currentMove.Count == 0)
        {
            if (selectedCell == null)
            {
                if (clickedCell.Piece?.Side == currentSide)
                {
                    selectedCell = clickedCell;
                    highlightedCells = GetHighlightedCells();
                    InvokeAsync(StateHasChanged);
                }
            }
            else if (clickedCell == selectedCell)
            {
                selectedCell = null;
                highlightedCells.Clear();
                InvokeAsync(StateHasChanged);
            }
            else if (highlightedCells.Contains(clickedCell))
            {
                if (captureMoves.Count > 0)
                {
                    var move = new RegularMove(selectedCell.GetPosition(), clickedCell.GetPosition());
                    currentMove.Add(move);

                    selectedCell = clickedCell;
                    highlightedCells = GetHighlightedCells();

                    if (highlightedCells.Count == 0)
                    {
                        selectedCell = null;
                        highlightedCells.Clear();
                    }
                    InvokeAsync(StateHasChanged);

                    await MakeCaptureMove(move);
                }
                else
                {
                    var move = new RegularMove(selectedCell.GetPosition(), clickedCell.GetPosition());

                    selectedCell = null;
                    highlightedCells.Clear();
                    InvokeAsync(StateHasChanged);
                    
                    await MakeRegularMove(move);
                }
            }
            else if (clickedCell.Piece?.Side == currentSide)
            {
                selectedCell = clickedCell;
                highlightedCells = GetHighlightedCells();
                InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            if (highlightedCells.Contains(clickedCell))
            {
                var move = new RegularMove(selectedCell.GetPosition(), clickedCell.GetPosition());
                currentMove.Add(move);
                selectedCell = clickedCell;
                highlightedCells = GetHighlightedCells();

                if (highlightedCells.Count == 0)
                {
                    selectedCell = null;
                    highlightedCells.Clear();
                }
                InvokeAsync(StateHasChanged);

                await MakeCaptureMove(move);
            }
        }
    }

    private List<Cell> GetHighlightedCells()
    {
        List<Cell> cells = new List<Cell>();
        if (captureMoves.Count > 0)
        {
            foreach(List<CaptureMove> moveSequence in captureMoves)
            {
                if (currentMove.Count >= moveSequence.Count)
                {
                    continue;
                }
                bool different = false;
                for (int i = 0; i < currentMove.Count; i ++)
                {
                    if (currentMove[i].Start != moveSequence[i].Start ||
                        currentMove[i].End != moveSequence[i].End)
                    {
                        different = true;
                        break;
                    }
                }
                if (different)
                {
                    continue;
                }
                CaptureMove nextMove = moveSequence[currentMove.Count];
                cells.Add(board.GetCell(nextMove.End));
            }
        }
        else
        {
            foreach(RegularMove move in regularMoves)
            {
                if (move.Start == selectedCell.GetPosition())
                {
                    cells.Add(board.GetCell(move.End));
                }
            }
        }
        return cells;
    }

    private Cell GetBoardCell(Cell cell)
    {
        return board.Cells[cell.Row][cell.Column];
    }
    
    private string GetCellHtmlClass(Cell cell)
    {
        string result = cell.Color == CellColor.Light ? "light-cell" : "dark-cell";
        if (cell == selectedCell)
        {
            result += " selected-cell";
        }
        if (highlightedCells != null && highlightedCells.Contains(cell))
        {
            result += " highlighted-cell";
        }
        if (cell.Piece?.Side == Side.Light)
        {
            result += " light-piece";
        }
        if (cell.Piece?.Side == Side.Dark)
        {
            result += " dark-piece";
        }
        return result;
    }

    private string GetCellPieceSymbol(Cell cell)
    {
        return cell.Piece == null ? "" : $"{cell.Piece.Side} {cell.Piece.Kind}";
    }
}